// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © pyramidhead41

//@version=6
indicator("MACD + RSI (auto, crosses & zones) % labels + Volume", shorttitle="MACD+RSI pro (%) + Vol", overlay=false)

// ── Inputs: MACD
src           = input.source(close, "Source")
fastLength    = input.int(12,  "MACD Fast Length")
slowLength    = input.int(26,  "MACD Slow Length")
signalLength  = input.int(9,   "MACD Signal Smoothing", minval=1, maxval=50)
useSmaOsc     = input.bool(false, "MACD Simple MA (Oscillator)")
useSmaSignal  = input.bool(false, "MACD Simple MA (Signal Line)")

// ── Inputs: RSI & auto-scale
rsiLen        = input.int(14, "RSI Length", minval=1)
obLevel       = input.float(70, "RSI Overbought", step=0.1)
osLevel       = input.float(30, "RSI Oversold",   step=0.1)
scaleManual   = input.float(1.0, "RSI scale (manual)", step=0.000001)
move          = input.float(0.0, "RSI vertical shift", step=0.000001)
autoScale     = input.bool(true, "Auto-scale RSI")
asBasis       = input.string("Histogram", "Auto-scale Basis", options=["Histogram","MACD line","Max of both"])
asLookback    = input.int(300, "Auto-scale Lookback (bars)", minval=1)
asSmoothEma   = input.int(10,  "Auto-scale Smoothing (EMA length)", minval=1)
asMinRange    = input.float(1e-6, "Auto-scale: Min target range", minval=0.0, step=1e-6)

// ── Inputs: Visuals
showMacdCrossMarkers = input.bool(true,  "Show MACD cross markers")
showRsiZoneBg        = input.bool(true,  "Shade RSI OB/OS zones")
showRsiEnterExitDots = input.bool(true,  "Show RSI enter/exit dots")
showRsiPercentLabel  = input.bool(true,  "Show RSI value label (%)")
showRsiPercentTable  = input.bool(true,  "Show RSI/OB/OS table (%)")
showObOsTextOnLines  = input.bool(true,  "Show OB/OS text on lines (%)")

// ── Inputs: Volume overlay
showVolBars     = input.bool(true,  "Show Volume Bars (scaled)")
volBarsOpacity  = input.int(40, "Volume Bars Opacity (0..100)", minval=0, maxval=100)
volLookback     = input.int(200, "Volume Lookback (bars)", minval=10)
volGuideEnabled = input.bool(true, "Show Volume Guide Line (dashed)")
volGuideMode    = input.string("90th percentile", "Guide Mode", options=["Max","90th percentile","SMA"])
volSmaLen       = input.int(20, "Guide SMA Length", minval=1)
volGuideColor   = input.color(color.new(color.gray, 0), "Guide Color")

// ── Colors
colGrowAbove  = color.rgb(38,166,154)   // #26A69A
colGrowBelow  = color.rgb(255,205,210)  // #FFCDD2
colFallAbove  = color.rgb(178,223,219)  // #B2DFDB
colFallBelow  = color.rgb(239,83,80)    // #EF5350
colMacd       = color.rgb(0,148,255)    // #0094ff
colSignal     = color.rgb(255,106,0)    // #ff6a00
colRsi        = color.rgb(225,123,243)

// ── MACD calc
fastMA  = useSmaOsc   ? ta.sma(src, fastLength)      : ta.ema(src, fastLength)
slowMA  = useSmaOsc   ? ta.sma(src, slowLength)      : ta.ema(src, slowLength)
macd    = fastMA - slowMA
signal  = useSmaSignal? ta.sma(macd, signalLength)   : ta.ema(macd, signalLength)
hist    = macd - signal

// ── RSI calc
rsi = ta.rsi(src, rsiLen)

// ── Auto-scale logic (под MACD-диапазон)
absHist     = math.abs(hist)
absMacd     = math.abs(macd)
rangeSrc    = asBasis == "Histogram" ? absHist : asBasis == "MACD line" ? absMacd : math.max(absHist, absMacd)
rangeRaw    = ta.highest(rangeSrc, asLookback)
rangeSmooth = ta.ema(rangeRaw, asSmoothEma)
targetRange = math.max(rangeSmooth, asMinRange)
scaleAuto   = targetRange / 20.0
scaleEff    = autoScale ? scaleAuto : scaleManual

// ── Volume (рисуем ПЕРЕД MACD, чтобы был фоном)
volRaw     = na(volume) ? 0.0 : volume
volMaxLb   = ta.highest(volRaw, volLookback)
volMaxSafe = volMaxLb > 0 ? volMaxLb : 1e-10
volScaledRaw = (volRaw / volMaxSafe) * targetRange
volScaled    = math.max(0.0, volScaledRaw) - move

// ── Inputs: Volume style
volStyle = input.string("Columns", "Volume Style", options=["Columns","Dots","Top dash"])

// ── Volume plots
volShow = showVolBars ? volScaled : na

// 1) Классические столбики
volPlotCols = volStyle == "Columns" ? volShow : na
plot(volPlotCols, title="Volume Columns",
     style=plot.style_columns,
     color=color.new(color.gray, volBarsOpacity))

// 2) Точки вместо столбиков
volPlotDots = volStyle == "Dots" ? volShow : na
plot(volPlotDots, title="Volume Dots",
     style=plot.style_circles,
     linewidth=2,
     color=color.new(color.gray, volBarsOpacity))

// 3) Только «штрих сверху» (бар полностью прозрачный)
volPlotDash = volStyle == "Top dash" ? volShow : na
plotchar(volPlotDash, title="Volume Top Dash",
         char="—",               // можно заменить на "—" или "_"
         location=location.absolute,
         color=color.new(color.rgb(151, 179, 196), volBarsOpacity),
         size=size.small)

// ── MACD plots (поверх объёма)
histColorRaw = hist >= 0 ? (nz(hist[1]) < hist ? colGrowAbove : colFallAbove)
                         : (nz(hist[1]) < hist ? colGrowBelow : colFallBelow)
plot(hist,   title="Histogram", style=plot.style_columns, color=color.new(histColorRaw, 70))
plot(macd,   title="MACD",   color=colMacd,   linewidth=2)
plot(signal, title="Signal", color=colSignal, linewidth=2)

// ── Volume guide line (Max / 90p / SMA)
volGuideRaw = (volGuideMode == "Max" ? volMaxLb : volGuideMode == "SMA" ? ta.sma(volRaw, volSmaLen) : ta.percentile_linear_interpolation(volRaw, volLookback, 90))
volGuideScaled = (volGuideRaw / volMaxSafe) * targetRange - move
var line volGuideLine = na
if barstate.islast
    leftX  = bar_index - 300
    rightX = bar_index
    if na(volGuideLine)
        volGuideLine := line.new(leftX, volGuideScaled, rightX, volGuideScaled,
                                 xloc=xloc.bar_index, extend=extend.none,
                                 color=volGuideEnabled ? volGuideColor : color.new(volGuideColor, 100),
                                 width=1, style=line.style_dashed)
    else
        line.set_xy1(volGuideLine, leftX,  volGuideScaled)
        line.set_xy2(volGuideLine, rightX, volGuideScaled)
        line.set_color(volGuideLine, volGuideEnabled ? volGuideColor : color.new(volGuideColor, 100))
        line.set_style(volGuideLine, line.style_dashed)
        line.set_width(volGuideLine, 1)

// ── RSI plots (dynamic bands)
rsiLine = ((rsi - 50.0) * scaleEff) - move
pRsi    = plot(rsiLine, "RSI (auto-scaled)", color=colRsi, linewidth=1)

upperVal = ( 20.0 * scaleEff) - move
lowerVal = (-20.0 * scaleEff) - move
pUpper   = plot(upperVal, "RSI upper (dyn)", color=color.new(colRsi, 50))
pLower   = plot(lowerVal, "RSI lower (dyn)", color=color.new(colRsi, 50))

// ── RSI zone background
obY = ((obLevel - 50.0) * scaleEff) - move
osY = ((osLevel - 50.0) * scaleEff) - move
pOb = plot(obY, "OB level dyn", color=color.new(color.red,   70), display= showRsiZoneBg ? display.all : display.none)
pOs = plot(osY, "OS level dyn", color=color.new(color.green, 70), display= showRsiZoneBg ? display.all : display.none)
fill(pOb, pUpper, color=color.new(color.red,   92))
fill(pLower, pOs, color=color.new(color.green, 92))

// ── MACD cross markers
bullCross = ta.crossover(macd, signal)
bearCross = ta.crossunder(macd, signal)
plotshape(showMacdCrossMarkers and bullCross, title="MACD Bull Cross",
     style=shape.triangleup, location=location.bottom, size=size.tiny, color=color.new(color.teal, 0), text="MACD↑")
plotshape(showMacdCrossMarkers and bearCross, title="MACD Bear Cross",
     style=shape.triangledown, location=location.top, size=size.tiny, color=color.new(color.maroon, 0), text="MACD↓")

// ── RSI enter/exit dots
rsiEnterOB = ta.crossover(rsi, obLevel)
rsiExitOB  = ta.crossunder(rsi, obLevel)
rsiEnterOS = ta.crossunder(rsi, osLevel)
rsiExitOS  = ta.crossover(rsi, osLevel)

rsiDotOBEnter = showRsiEnterExitDots ? (rsiEnterOB ? rsiLine : na) : na
rsiDotOBExit  = showRsiEnterExitDots ? (rsiExitOB  ? rsiLine : na) : na
rsiDotOSEnter = showRsiEnterExitDots ? (rsiEnterOS ? rsiLine : na) : na
rsiDotOSExit  = showRsiEnterExitDots ? (rsiExitOS  ? rsiLine : na) : na

plot(rsiDotOBEnter, title="RSI enter OB dot", style=plot.style_circles, linewidth=3, color=color.new(color.red, 0))
plot(rsiDotOBExit,  title="RSI exit OB dot",  style=plot.style_circles, linewidth=3, color=color.new(color.orange, 0))
plot(rsiDotOSEnter, title="RSI enter OS dot", style=plot.style_circles, linewidth=3, color=color.new(color.green, 0))
plot(rsiDotOSExit,  title="RSI exit OS dot",  style=plot.style_circles, linewidth=3, color=color.new(color.yellow, 0))

// ── Percent strings (for labels/table)
rsiPctStr = str.tostring(rsi / 1, format.percent)     // текущее RSI в %
obPctStr  = str.tostring(obLevel / 1, format.percent) // OB в %
osPctStr  = str.tostring(osLevel / 1, format.percent) // OS в %

// ── Label on RSI line with % value
var label rsiLbl = na
if barstate.islast and showRsiPercentLabel
    if not na(rsiLbl)
        label.delete(rsiLbl)
    rsiLbl := label.new(bar_index, rsiLine, text="RSI " + rsiPctStr, style=label.style_label_left, textcolor=color.white, color=color.new(color.black, 0), size=size.tiny)
if (not showRsiPercentLabel or not barstate.islast) and not na(rsiLbl)
    label.delete(rsiLbl)
    rsiLbl := na

// ── Optional text on OB/OS lines in %
var label obLbl = na
var label osLbl = na
if barstate.islast and showObOsTextOnLines
    if not na(obLbl)
        label.delete(obLbl)
    if not na(osLbl)
        label.delete(osLbl)
    obLbl := label.new(bar_index, obY, "OB " + obPctStr, style=label.style_label_left, textcolor=color.white, color=color.new(color.red, 40), size=size.tiny)
    osLbl := label.new(bar_index, osY, "OS " + osPctStr, style=label.style_label_left, textcolor=color.white, color=color.new(color.green, 40), size=size.tiny)
if (not showObOsTextOnLines or not barstate.islast)
    if not na(obLbl)
        label.delete(obLbl)
        obLbl := na
    if not na(osLbl)
        label.delete(osLbl)
        osLbl := na

// ── Small table (top-right) with % values
var table t = na
if showRsiPercentTable
    if na(t)
        t := table.new(position.top_right, 1, 3, border_color=color.new(color.gray, 80), frame_color=color.new(color.gray,100))
    table.cell(t, 0, 0, "RSI: " + rsiPctStr, text_color=color.white, text_halign=text.align_right)
    table.cell(t, 0, 1, "OB:  " + obPctStr,  text_color=color.white, text_halign=text.align_right)
    table.cell(t, 0, 2, "OS:  " + osPctStr,  text_color=color.white, text_halign=text.align_right)
if not showRsiPercentTable and not na(t)
    t := na
